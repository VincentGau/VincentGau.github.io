<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[区块链初探]]></title>
    <url>%2F2018%2F03%2F06%2Fblockchain-1%2F</url>
    <content type="text"><![CDATA[区块链（Blockchain）最初于2008年被应用于比特币（加密电子货币）上，作为交易账本；区块链因比特币进入大众视野，发明者中本聪由此名声大振，然而其真实身份至今仍是一个谜，这在互联网时代是一件令人匪夷所思的事情；基于区块链技术的比特币成为了第一个解决了两军问题的电子货币，它不需要一个受信任的权威机构或是中心服务器，比特币被发明之后以极快的速度发展，从随处可闻的挖矿新闻就能略知一二，虚拟货币在全球掀起了一场风暴，其底层区块链技术成为各大机构和公司研究的对象。 区块链是什么关于区块链，并没有一个统一明确的定义，有将其解释为一种分布式数据库，也有将其理解为一种去中心化的分布式账本，区块链虽然存储数据，但将其定义为数据库未免牵强，存储数据并不是它唯一关注的重点，而账本也仅是当我们提及比特币等电子货币的时候适用，比特币是区块链技术的一个应用，二者并不等同，区块链还能做更多的事情。从名字上看，blockchain 是由块组成的一条链，Wikipedia 中的定义为： A blockchain, originally block chain, is a continuously growing list of records, called blocks, which are linked and secured using cryptography. 区块链是由一系列加密数据块链接产生的，每一个区块都包含上一个区块的哈希值，时间戳，和交易数据，它被设计成不可修改，无法伪造（伪造代价巨大，几乎无法实现）。这让区块链生而适合一些特定场景，比如事件记录，医疗记录，物流跟踪，投票，文档，版权管理，产权转移等等； 区块链2.0的概念提出与2014年，指基于分布式区块链数据库的新型应用，区块链2.0已经不止于交易，而是使价值交换不需要一个强势的中间人作为信息和金钱的仲裁者； 区块链的结构区块链的数据库由点对点的网络和一个分布式时间戳服务器自动管理，就比特币应用来讲，区块链是一个去中心化的分布式账本，在多台计算机之间记录交易，在不修改所有子块的前提下，记录的生成是不可逆的（如果有人修改了一个区块，该区块的哈希值就改变了，由于后一个区块记录这前一个区块的哈希值，要使区块修改之后仍在链中，必须依次修改所有的后续区块，哈希计算被设计成非常困难，因此区块修改难以实现，除非攻击者掌握了51%以上的计算能力），区块链的可靠性因此保证，数据一旦上链便无法篡改；区块链也被描述成一种价值交换协议，相较于传统方法，基于区块链的价值交换可以更快捷，成本更低，理想情况下也更安全； 去中心化提到区块链，听到最多的词是去中心化；在各个网络节点中存储数据，区块链技术避免了中心化存储数据，它没有中心节点；中心化的数据提供更好的可控性，信息和数据可以被修改，分中心话系统的每一个节点都有区块链的完整拷贝，数据质量由所有数据库共同保证，没有一个权威节点存在，所有节点的地位相同，每一条交易信息都会被广播到整个网络， 区块一个区块由区块头和区块体组成，区块头记录当前区块的特征信息（上一个区块的加密哈希，时间戳，区块体的哈希 等），区块体记录实际的交易数据； 区块时间区块时间是区块链网络生成一个新区块所花费的平均时间，比特币中生成一个区块的时间被设定成十分钟，通过设置计算难度系数动态调节，保证区块时间维持在这一平均水平，难度系数的不断调高，导致挖矿越来越难； 区块分叉有时候多个区块可能同时产生，他们拥有同一个前置区块，导致区块链分叉；对此，每个区块链都有特定的算法来给分叉打分，拥有更高评分的分支会被保留下来，其他的被抛弃，被抛弃的区块被称为孤儿区块；比特币中，如果区块有分叉，将保留先拥有6个新的后续区块的分支，也就是一个小时之后就能确认； 挖矿所有人都能向区块链中提交区块，而且必须保证节点同步，所以添加新区块必须有限制，不能增加得太快，设计让添加区块变得困难，只有通过海量的计算才能得到当前区块的有效哈希，要得到正确的哈希只能靠猜，也就是进行hash碰撞，猜对了就能得到比特币酬劳，这个计算的过程被称为挖矿； 区块链的短板虽然说需要全网51%以上的计算能力才能篡改区块链中的信息，但是对于私有链，其本身已经掌握了100%的创造区块的资源，只要攻破了私有服务器上的区块创造工具，就可以随意修改交易信息，因此一些内部的区块链方案并没有解决什么问题，只是增加了笨重的数据库而已；区块链的安全性目前也没有想象中那么高，2018年3月7日币安黑客事件引起虚拟货币恐慌，黑客利用大量做空获利，交易被记录被回退，解释是记录在交易所手里还没有上区块链； 区块链的应用场景智能合约智能合约是区块链 相关概念两军问题两军问题，假设有两只军队分别有两个将军指挥，他们分别在堡垒的两个方向，只有同时发起进攻才能胜利攻下堡垒，如果贸然单独进攻则有被击败的风险，于是两军需要约定共同发起攻击的时间，但是他们之间通信必然要经过堡垒，有可能被堡垒中的敌军截获情报；背景介绍至此，假设第一个将军发送信息，约定‘次日早晨8点一起进攻’，信息发出之后，他无法确认对方将军是否收到了他的信息，因此他不会贸然出击，为了确认，第二个将军会发出信息‘我收到了你的消息，次日早晨8点一起进攻’，他发出消息之后，无法确认第一个将军是否会收到他的回信，因此也会犹豫是否出击，这样，无论进行多少轮确认，总有一方无法确认他们的最后一条消息是否成功被送达，根本原因是他们在通过一个不可靠的信道通信。两军问题很容易让我们联想到TCP 的三次握手协议，IP协议并不是一个可靠的通信协议，TCP在这个不可靠的信道上通过三次握手保证了基本的可用性，增加多少次握手次数也无法保证信道的可靠性； 拜占庭将军问题拜占庭将军问题，一组拜占庭将军各自率领一致军队包围一座城市，这些将军希望规划一个攻城计划，将军们必须决定是进攻还是撤退，其中一些将军支持进攻，另外一些支持撤退，他们同意共同决定最后的计划，因为部分军队进攻部分军队撤退会造成严重后果；这个问题因为将军中可能存在叛徒变得复杂起来，这些叛徒将军可能会投票给糟糕的策略，甚至执行糟糕的决策，比如有九位将军，其中四位支持进攻，四位支持撤退，第九位是叛徒将军，故意向支持进攻的四位将军送信表示投票进攻，向另外四位支持撤退的将军送信表示投票撤退，这样就会造成部分军队进攻，部分撤退，对军队整体造成破坏；不仅如此，将军之间的信件是否能被信使顺利送达，新建是否会被伪造篡改都会使问题变得更复杂；只有当多数忠诚将军在战略上达成统一，可称达到了拜占庭容错；]]></content>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行工具库 fabric]]></title>
    <url>%2F2018%2F01%2F18%2Ffabric%2F</url>
    <content type="text"><![CDATA[fabric 是一个python库（支持python2.5 到2.7 版本），也是一个命令行工具，，它的一个重要的功能是在不登录远程服务器的情况下，在本地执行远程shell命令，上传下载文件等等，这个特性让我们可以通过fabric 来进行应用部署，以及执行一些系统运维自动化的任务，而且是可以在多台服务器上执行。 It provides a basic suite of operations for executing local or remote shell commands (normally or via sudo) and uploading/downloading files, as well as auxiliary functionality such as prompting the running user for input, or aborting execution. 安装安装fabric：激活python2 虚拟环境，pip install fabric 使用SSH keyfabric 提供密码和密钥方式登录远程服务器，为了方便和安全起见，密钥是更好的选择。 生成SSH key首先我们需要在远程服务器生成密钥，在远程执行：$ ssh-keygen在.ssh/ 目录下生成默认rsa算法加密的密钥对（id_rsa 私钥，id_rsa.pub 公钥） 发布公钥密钥生成之后，需要把公钥的内容添加到.ssh 目录下的 _authorizedkeys 文件，1234567$ cd ~/.ssh$ cat id_rsa.pub &gt;&gt; authorized_keys``` 修改权限```bash$ chmod 600 authorized_keys$ chmod 700 ~/.ssh 配置fabric 环境参数将私钥下载到本地，指定fabric 环境配置env.key_filename = &quot;path/to/id_rsa&quot; 示例fabric 提供的API 中，常用的有local() 和run()，分别在本地和远程服务器执行命令。fabric 文件的一个函数对应一个操作。 举一个简单的例子，如需要列出远程服务器”/“下的文件和目录，在本地新建fabfile.py 文件如下： 12345678910#!/usr/bin/python env# -*- coding: utf-8 -*-from fabric.api import *env.hosts=[&apos;username@xxx.xxx.xxx.xxx&apos;]env.key_filename = &quot;id_rsa&quot; # 通过密钥登录远程服务器def hello(): with cd(&apos;/&apos;): # 进入目录 run(&apos;ls -l&apos;) # run() 执行远程操作 列出远程机器上的文件和目录 执行 fab hello 命令列出文件和目录，和在远程服务器上执行一样。 fabfiles 通常放在项目的根目录。 fabric 文档]]></content>
      <tags>
        <tag>python</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go into PyCharm]]></title>
    <url>%2F2018%2F01%2F17%2Fgo-into-pycharm%2F</url>
    <content type="text"><![CDATA[开发Python项目首选PyCharm，PyCharm有很多好用的强大的特性，略作记录以备后用。 Automatic Upload除了集成Git 等版本控制工具，pycharm 还提供自动上传文件到远程主机，以及调用远程主机解释器的功能。配置好SSH连接到远程主机之后，在本地工作区所做的修改可以被自动同步到远程主机上. 因为安全原因，我在远程主机禁止用户名密码方式，只允许私钥登录，因此需要提前准备Private key 文件以在IDE 中连接远程主机； PS: 在远程主机生成的ppk私钥文件不被pycharm 支持，需要通过pyttygen 工具进行转换：打开puttygen.exe， Conversation -&gt; Import 导入已生成的ppk 私钥文件，密码可选，然后 Conversation -&gt; Export OpenSSH Key 导出备用。 PyCharm菜单栏进入Tools -&gt; Deployment -&gt; Configuration，新增配置，类型选择SFTP，配置远程主机及端口，选择验证方式为Key Pair，私钥文件选择上一步骤导出的文件，测试SFTP 连接是否成功。 在Mapping 标签页填上本地路径和远程主机发布路径。 远程主机配置完成之后可以继续在Deployment 下的Options 选项中做一些个性化的配置，比如排除哪些文件，是否自动上传等。 TODOPyCharm 和其他jetBrain 的IDE 都有TODO 功能，迅速定位注释中出现TODO 关键字的位置，帮助我们快速回到上次工作遗留的地方。 TODO 窗口包含四个标签页，显示不同范围的TODO。 此外，TODO 功能还支持自定义模板。 More about TODO PyCharm 帮助文档]]></content>
      <tags>
        <tag>programming</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django 笔记]]></title>
    <url>%2F2018%2F01%2F12%2Fdjango-notes%2F</url>
    <content type="text"><![CDATA[Django是一个用python写的轻量级Web框架，虽说是轻量级，但是它能做的事情并不少，有了Django我们就可以用很少的代码来搭建一个现代化的网站，避免重复造轮子。Django2.0之后已经放弃了对python2 的支持，只支持python3.4 及以上版本。 Django框架包含了一个完整Web应用各方面的知识点，下面对Django一些常用的特性做一个梳理，旨在学习Django的架构和源码。 URL Route路由规则Django项目的路由规则写在一系列urls.py文件里，包括项目的urls.py和各个app的urls.py。当一个请求到来，在展示最终页面之前需要经过以下步骤： 首先确定根URLconf，通常这个值在settings.py 中设置。但是如果传入的HttpRequest对象有urlconf属性，那么它将会作为当前请求的根URLconf，代替settings中的ROOT_URLCONF； Django加载该URLconf 模块，找到urlpatterns变量； Django依次匹配每一个url pattern，在第一个匹配所请求URL的pattern处停下来，因此pattern 的顺序是有影响的； 一旦一个URL pattern匹配成功，Django 会调用对应的视图，视图接收以下参数： 一个HTTPRequest 实例; 如果匹配的URL pattern没有返回命名组，正则表达式匹配的内容将会作为positional parameters 提供给视图; 关键字参数由正则表达式匹配的命名组组成，可以被可选参数覆盖； 如果没有匹配到任何URL pattern，或者在匹配过程中抛出了异常，Django会调用一个对应的错误处理视图，比如400，500等； Django2.0 已经不在路由规则中使用符号 ^、 $ ，并且将url函数改成path函数。 传递额外的参数给视图URLconf提供了一个hook，允许以python dictionary的形式传递额外的参数给视图函数。123urlpatterns = [ path('blog/&lt;int:year&gt;/', views.year_archive, &#123;'foo': 'bar'&#125;),] 上例中，如果请求/blog/2018/，Django会调用 views.year_archive(request, year=2018, foo=&#39;bar&#39;) 静态文件在生产环境我们通常会使用单独的server来提供对静态文件的访问，Django提供了一个static()方法在调试的时候serve静态文件。123urlpatterns = [ # ... the rest of your URLconf goes here ...] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) ModelDjango已经包含了ORM，因此只需要关注Model类，而不用关心SQL。前提是要在INSTALLED_APPS 中包含指定的app。 Tips：如果使用PyCharm 的话，通过Ctrl + Alt + R 调出python manage.py 命令界面，可以直接执行migrate，shell 等命令，不用在python 命令行执行. MiddlewareDjango 里的Middleware 可以看成是一个hook，处于request/response 过程之间，是一个轻量级的、底层的插件系统，用于改变Django 的输入输出。 一个middleware factory 是一个callable，它接收一个get_response callable作为参数，返回一个middleware；一个middleware 是一个callable，它像view一样，接收一个request， 返回一个response。返回真正的view 之前可能经历数个中间件：在响应阶段，调用视图之前，Django按顺序从上到下应用MIDDLEWARE中定义的中间件。可以把这个结构看成一个洋葱，洋葱的中心是最后展示的view，它被一层层的中间件包裹起来，每一层都调用get_response把request 传递到下一层，直到view，然后response也会按原路返回直到最外层的中间件。 在request 和response 之间想要做的事情，都可以用middleware 来实现。 AuthenticationDjango 的Authentication 系统处理用户组和账户，用户许可和基于cookie的session，实际上它包含Authentication 和Authorization 两部分，前者负责确认用户的身份，后者决定一个认证用户可以做的事情。 自定义User模型User 对象是认证系统的核心，Django提供了默认的User模型，但是还是推荐使用自定义的user 模型，在将来提供更好的扩展性。 If you’re starting a new project, it’s highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you’ll be able to customize it in the future if the need arises. 使用自定义的User模型之前需要三个步骤： 继承AbstractUser 类： 12class User(AbstractUser): pass settings.py 中指定 AUTH_USER_MODEL = ‘appname.User’ 在app 的admin.py中注册User模型：12345from django.contrib import adminfrom django.contrib.auth.admin import UserAdminfrom .models import Useradmin.site.register(User, UserAdmin) Authentication ViewsDjango 提供了一些默认视图（Authentication Views）处理登录，注销和修改密码操作，可以直接拿来用。如果需要更多个性化的处理，不想使用内置的视图，在项目中新建一个app来处理这些用户操作。 buit-in forms如果不想使用内置的视图，但又不想自己写各种表单，authentication 系统提供了一些内置的form。 TestingTDD 是敏捷开发的一个核心实践，通过测试来推动开发的进行，不写测试用例节省的时间有可能在将来付出成倍的代价。自动化测试可以发现迭代过程中对已有功能的不可预期的影响，及时解决问题。 Django 的单元测试使用Python的标准库unittest，通过class-based 的方法定义测试用例，执行测试的时候会检查所有以test 开头的文件。 测试提速测试并行如果测试用例相互独立，可以并行执行测试以提升效率。执行test 加上–parallel参数，比如test --parallel=4 保留测试数据库保留上一次运行测试创建的册数数据库，节省创建和销毁操作，大大减少运行测试的时间。test --keepdb 密码哈希默认的密码哈希算法相当耗时，如果需要在测试用例中大量认证用户，可以自定义hash 算法，在settings.py中设置PASSWORD_HASHERS，指定特定的哈希算法，比如123PASSWORD_HASHERS = [ 'django.contrib.auth.hashers.MD5PasswordHasher',] 测试工具测试用户登陆状态调用force_login方法模拟用户已登陆状态，无须先创建用户再模拟登陆：self.client.force_login(User.objects.get_or_create(username=&#39;testuser&#39;)[0]) 测试静态文件调试和发布的时候常常会找不到静态文件，检查静态文件是否被正常serve123from django.contrib.staticfiles import findersresult = finders.find('css/base.css') 如果找到静态文件，find() 会返回文件的全路径，否则返回None； 日志Django 使用Python 内置的logging 模块来实现系统日志；一个日志配置包含四个部分：Loggers, Handlers, Filters, Formatters； 基本定义Logger 是日志系统的入口，每一个logger 都是一个named bucket，信息被写入logger 以作后续操作；logger 有其日志级别，每一条日志记录也有其级别，只有日志记录的级别高于等于logger 级别的时候，该日志记录才会继续后续的处理，否则会被忽略；当logger 决定一条信息需要被处理的时候，该信息被传递给一个Handler； Handler 是一个决定logger 中的每一条信息将如何被处理的引擎，它描述一个具体的日志行为，比如把信息输出到屏幕，文件或者socket； handler 也有级别，如果日志记录的级别低于handler 的级别，它会被忽略；一个logger 可以有多个handler， 每个handler 可以有不同的日志级别，这样可以根据信息的重要性来提供不同形式的通知，比如可以单独使用一个handler 处理CRITICAL 级别的日志记录，发送告警，同时用另一个handler 处理所有日志记录，写入文件以备后续分析； Filter 对日志从logger 传递到handler 提供更多的控制，默认情况下，任何符合级别要求的日志记录都会被处理，加上过滤器之后可以给日志处理增加额外的条件；Filter 还可以在日志记录被发出之前对它进行修改，比如写一个过滤器，在符合特定条件的情况下，把日志记录的级别从ERROR 降到WARNING；filter 可以被用在logger 或者handler 上，多个filters 可以通过链式实现过滤操作；一个比较常见的filter 是require_debug_false， 当DEBUG设置为False才处理日志记录； Formatter 描述具体的文本格式，将日志记录渲染成文本； 处理流程如下：12logger ---------&gt; handlers ---------&gt; formatter ---&gt; files, emails .etc filters filters Django 的日志组件Django 提供了一些工具来处理Web 服务环境下的日志，包括内置的一些loggers, filters 和一个AdminEmailHandler；如果logging 配置字典中disable_existing_loggers 值设置成True, 默认配置中的所有logger 会被禁用（禁用不同于移除，这些logger 依然存在，但会丢弃所有给它的内容），为了避免预期之外的情况，最好将其设置成False，如果需要可重定义一些默认的logger； AdminEmailHandler顺带提一句日志配置中的邮件设置，当DEGUG设置为False 的时候，如果在setting.py 中同时设置了ADMINS参数，Django 会在发生500错误的时候发送邮件给ADMINS 中的用户；默认情况下，Django 将从root@localhost 发送邮件，为了保证邮件正确接收，需要设置SERVER_EMAIL 参数为自己的发送邮箱地址；如果发现邮件发送失败，检查DEBUG是否设置成False，smtp服务器的用户名和密码是否正确，是否设置了SERVER_EMAIL参数；123456789101112131415ADMINS = ( ('haku', 'g@kohaku.cc'),)MANAGERS = ADMINS# EmailEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'EMAIL_USE_TLS = TrueEMAIL_HOST = local_settings.EMAIL_HOSTEMAIL_PORT = local_settings.EMAIL_PORTEMAIL_HOST_USER = local_settings.EMAIL_HOST_USEREMAIL_HOST_PASSWORD = local_settings.EMAIL_HOST_PASSWORDDEFAULT_FROM_EMAIL = local_settings.DEFAULT_FROM_EMAILSERVER_EMAIL = local_settings.DEFAULT_FROM_EMAIL 为了检测配置是否正确，在本地运行Python 内置的SMTP 测试服务器:python -m smtpd -n -c DebuggingServer localhost:1025 然后在settings.py 设置：12EMAIL_HOST='localhost'EMAIL_PORT=1025 触发一个500错误，或者生成一条error及以上级别的日志logger.error(&#39;test&#39;)，在终端上会显示发送的邮件内容； 404 Error Reporting当DEBUG设置成False，并且在MIDDLEWARE设置中包含了django.middleware.common.BrokenLinkEmailsMiddleware，Django就会在抛出404异常并且该请求头包含referer 的时候给MANAGERS 列表中的用户发送邮件，这样做既能检测Broken Links，又能避免因为用户手动输入一个无效的地址而报错；]]></content>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在2018的开始]]></title>
    <url>%2F2018%2F01%2F08%2Fnew-year-2018%2F</url>
    <content type="text"><![CDATA[没想到啊没想到，2018年刚刚开始，就被一场重感冒当头一棒，整整一个星期才慢慢缓过来。 回顾2017年，也不知道做了些什么事。读完一遍Stavrianos 的《全球通史》，重读了一次余华的《活着》，读了东野圭吾的畅销书《解忧杂货店》，还有一些看了就像没看一样的。读了一些Django 的源码，入门了Node，假装给开源世界做了一点贡献，花了两天时间给kohaku.cc 搬家。2017年哪里都没有去…… 惊慌地想要在日记中再找一些风和阳光的蛛丝马迹，聊以慰藉，失望地发现2017年5月某日的上一篇是16年的5月，突然间悲从中来。 2017年，我没有在世界上留下痕迹，岁月却在我身上留下痕迹，长丑了，都说相由心生。 那么2018年，我有一个愿望，就是变帅！]]></content>
      <tags>
        <tag>不知所云</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[任务计划与windows服务的集群化]]></title>
    <url>%2F2017%2F12%2F26%2Fclustered-tasks-and-services%2F</url>
    <content type="text"><![CDATA[我们常常会使用任务计划定时执行一些日常任务，若需要程序长时间执行又不需要用户登录，可能还会用到Windows Service，一般情况单台服务器就能满足要求，但对一些要求比较高的任务可能需要集群化来保证高可用性。在故障转移集群上实现任务计划的集群化和Windows Service的集群化有一些差异。 任务计划集群化Windows Server 2012 之前，我们可以在集群的节点上部署任务，但是任务计划程序对整个集群是不感知的，手动管理各个节点上的任务计划比较容易出错，尤其是在节点多的情况下，Windows Server 2012 以后，通过Cluster Scheduled Tasks 可以十分简单地通过PowerShell 来管理集群上的任务计划，只需要在任意一个节点上注册任务。比较常用的是AnyNode 模式，任务计划在任意一个节点上启用，在其他节点都处于禁用状态。 对于已存在的任务计划，可以先导出xml，以该文件名作为参数进行任务注册，这样就不用单独配置触发器了：1Register-ClusteredScheduledTask -TaskName MyTask -Cluster MyCluster -Xml $xmlFile 注意： 使用-Xml参数的时候需要保证任务计划用户在各个节点上都存在 详见 How to Configure Clustered Tasks with Windows Server 2012 Windows service集群化Windows Service 不能感知到整个集群，因此Windows Service集群化需要首先在各个节点上安装服务，然后再在故障转移集群管理器中添加服务。 参考 Creating a Windows Cluster: Part 5 – Adding Applications and Services to the Cluster]]></content>
      <tags>
        <tag>scheduled task</tag>
        <tag>Windows service</tag>
        <tag>clustered</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬家啦~]]></title>
    <url>%2F2017%2F12%2F23%2Fmove-to-hexo%2F</url>
    <content type="text"><![CDATA[君子生非异也，善假于物也 之前对 python 兴趣正浓的时候用 django 写过一个博客，一边写一边读源码，颇有收获，奈何缺少艺术天分，不懂设计，没有风格，难看得很，一开始写点东西的欲望逐渐消磨，小站也渐渐疏于维护。 偶然发现朋友用hexo 搭的博客，简洁明了，于是萌生了重新梳理博客的想法，纠结于用hexo 搭一个和重写原来的博客之间，最后还是选择 hexo，发现竟意外地好用，于是就有了现在的模样。原来的 kohaku.cc 暂时运行在另一个次元，将来可能以新的面目出现。 最近的日记本写到最后一页，又懒得去买新本子，就这么空了几个月。今后将在此不定期更新，记录一些或好或坏心情，以及其他……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 弱引用]]></title>
    <url>%2F2017%2F05%2F23%2Fpython-weakref%2F</url>
    <content type="text"><![CDATA[Python 的 weakref 模块实现对对象的弱引用（Weak References）。我们知道，Python 的垃圾回收机制基于引用计数器实现，实例创建后将由引用计数器管理，对实例的每一次引用都会使其引用计数器加1，引用的删除使引用计数器减1，如果引用计数器到达0实例将被销毁。但是有时候我们希望在内存需要的时候更早地销毁一个对象，比如发生循环引用时，或者在建立一个对象缓存时；弱引用不能保证对象不被销毁，当一个对象只存在弱引用时，它也会被销毁。 弱引用的一个基本用法就是实现缓存和大对象映射，使一个大对象不会因为存在于缓存或者一个键值对中而逃避被销毁。例如，我们有一些大的二进制图片对象，现在打算把他们和名称一一对应，如果使用 Python 的 dictionary 将名称映射到图片对象（或者反过来），图片对象会一直存在于内存中，因为它们依然作为字典的值（或者键）存在，弱引用可以解决这个问题，使用基于weakref模块实现的 WeakKeyDictionary 和 WeakValueDictionary ,用弱引用来构造映射关系，我们假设图片对象是 WeakValueDictionary 的值，当该对象的引用只是 weak mapping 中的弱引用时，GC会回收该对象，weak mapping 中对应的条目也会被删除；一些内建类型比如 list， dict 不直接支持弱引用，但可以通过子类增加弱引用支持；对对象的弱引用不会增加其引用计数，见下面代码： 123456789101112131415161718192021222324import sysimport weakrefclass A(object): passa = A()print sys.getrefcount(a) # 2b = aprint sys.getrefcount(a) # 3c = weakref.ref(a)print sys.getrefcount(a) # 3print weakref.getweakrefcount(a) # 1del bprint sys.getrefcount(a) # 2del cprint sys.getrefcount(a) # 2print weakref.getweakrefcount(a) # 0 从上面的例子可以看到，对对象的弱引用使用单独的计数器；之所以第一次获取引用计数结果是 2而不是 1，是因为把 a 当参数传入了 getrefcount() 方法。 总结，弱引用主要解决垃圾回收的问题，多用在处理对象缓存和循环引用问题上；回顾一下弱引用在 django 中的一个使用场景，Signal 类初始化的时候就定义了一个 receiver 缓存，在连接receiver 和信号的时候，默认对 receiver 使用弱引用；weakref 模块的方法和属性详见 weakref 相关文档：https://pymotw.com/2/weakref/index.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Weakref</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[No no no]]></title>
    <url>%2F2014%2F09%2F27%2Fno-no-no%2F</url>
    <content type="text"><![CDATA[Don’t anybody come 惊扰我的幻光 当我需要在这个时间掏出钥匙 这扇门 就是一道梦幻的分隔 窗台上的植物 分明一动不动 又分明在变化 像靠在墙角的脑袋圆圆的娃娃 恍恍惚惚 置身于幻光 在心里生出一道意识 别碰它 一碰就碎 我也像那盆花 一动也不动 我们都小心翼翼啊 假装不得动弹 Don’t anybody come 惊扰我的幻光 只看着它 渐变昏黄]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>不知所云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毕业季的阳光]]></title>
    <url>%2F2012%2F05%2F31%2Fsunshine-in-graduation-season%2F</url>
    <content type="text"><![CDATA[走进西侧门的时候阳光正烈后背已经被书包捂出汗 去食堂的小道上没几个人影才意识到只有我们这样的大四众才能随时享受食堂满是空座的待遇现在距离下课还有一刻钟的时间到处都是空座位巴巴地站在桌旁看别人吃东西的情形不会再出现到我吃完离开的时候来食堂的人才多了起来 我需要找个安静的地方修改论文去图书馆得拿卡信息楼又好像比三教远那么一点 这次靠近三教 有点微妙异样它好像有强大的压力隔绝外界所有在走近三教的过程中我感觉不到有一丝声音出现在我耳中 一个人与我擦身而过这时候的三教 是一头睡着的庞然大物迎面走来的刚从教室出来的学弟学妹边走边讨论着什么我只看到他们嘴唇在动 四年前刚来的时候看三五成群的人谈笑着与我擦身而过我在世界之外四年后要离开的时候看三五成群的人谈笑着与我擦身而过我在世界之外始点与终点之间 似乎没那么遥远 我继续我的行走 没有回头不知道他们会不会回头指着对同伴笑说：你看，那个人是不是很像一只狗……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[狗]]></title>
    <url>%2F2011%2F10%2F05%2Fdog%2F</url>
    <content type="text"><![CDATA[傍晚 马路上遛狗的人不少 狗永远走在前面 也远比人活力 偶尔一人一狗迎面碰到另一人一狗 两狗相互狂吠 不知是示好还是示恶 或者只是打招呼 结果一般都是 稍停一秒 然后错过 姑且对两狗表示一下同情 它们却很安然 绳索困住自由似乎已经被接受 它们继续晃晃悠悠地行进 就像根本没有什么 同类 就在刚刚与自己擦身而过 我看着这只大黑狗 在错过两只小白狗之后快乐的前进 不要想太多 或许它调戏的目的已经达到]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>不知所云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老房子]]></title>
    <url>%2F2010%2F11%2F20%2Fthe-old-house%2F</url>
    <content type="text"><![CDATA[我有一间老房子 住着黄昏的破屋与大河 烟囱和桥梁 飘雪的夜晚里 紫色的长阶梯 半开着门的旧楼房 水泥路边独树一帜的木屋 被斑驳阳光装饰的铁门 闪烁着的叶的影子 如丝细雨 荒凉山路 夏天静谧的小镇 没有声音 也没有风 到了尽头的巷子 名叫胡蝶梦 耀眼的阳光 融化了一圈树叶和白云 日历上摆动的老时钟 嗒嗒嗒 凝望着 窗户下安静看书的小娃娃 枝桠上独舞的红丝带 阴沉的乌云 肃杀的古堡 烫金的晚霞 利剑般的高楼大厦 沧海明月 两处天涯 我有一间老房子 名字 叫《遗忘》 住着黄昏的破屋与大河 烟囱和桥梁]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生命中太多的幻光 不能追逐]]></title>
    <url>%2F2010%2F09%2F27%2Fpursuit-of-light%2F</url>
    <content type="text"><![CDATA[.]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
        <tag>幻光</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[久石让]]></title>
    <url>%2F2010%2F01%2F09%2Fjoe-hisaishi%2F</url>
    <content type="text"><![CDATA[久石让 你的音乐来自哪里 ……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cymm wxsm]]></title>
    <url>%2F2009%2F07%2F24%2Fcymm-wxsm%2F</url>
    <content type="text"><![CDATA[不是睡不着 是电池还没有耗尽 好久沒遇上下雨了 這兩天卻都在下雨 狂暴地下 明明還沒到該天黑的時候 天黑了 只隐约知道外头在下雨 等我再次回過神來 只有清涼的風和一地的積水 天又亮了 其實一直在天上 只是沒有落下來 下雨之前 既悶又熱 下過雨之後 涼爽了許多 踩著被積水包圍的已經干了的地方向外走 涼風突然吹在身上 不由自主地摩擦雙臂 短暫的刺激過後 我放下雙手 開始享受夏天難得的涼風 就算不是太陽 有這風 也能讓人十分舒服的 虧得下雨了 不然 還真忘記了夏天也不都是豔陽高照的 呵呵……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夏天的味道]]></title>
    <url>%2F2009%2F04%2F13%2Fscent-of-summer%2F</url>
    <content type="text"><![CDATA[我到图书馆的时候，刚过正午，那里人还不多，屋里很亮，很安静。 看书看了没多久，我也趴桌子上了…… 迷迷糊糊中，仿佛听到风扇转动的声音。睁眼，没有发现风扇，却让我突然之间闻到了夏天的味道…… “中午，刚吃完饭，大家都趴在桌子上，没有人说话——大家都睡着了。窗外，树上的的树叶在晃动，却听不见它们发出的声响，耳边传来风扇搅动的声音，夹杂着笔尖划过纸面的沙沙声，偶尔传来的一两句低语，并没有显得格格不入，所有的声音都是那么孤独，这时候，天上飘过一朵云，原本明亮的房间突然暗了下来，而后又缓缓变亮……躁动在安详中消亡。” 艳阳，暖风，还有永远都飞不尽的飞絮……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
</search>
