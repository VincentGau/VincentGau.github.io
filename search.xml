<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[fabric-python命令行工具库]]></title>
    <url>%2F2018%2F01%2F18%2Ffabric%2F</url>
    <content type="text"><![CDATA[fabric 是一个python库（支持python2.5 到2.7 版本），也是一个命令行工具，，它的一个重要的功能是在不登录远程服务器的情况下，在本地执行远程shell命令，上传下载文件等等，这个特性让我们可以通过fabric 来进行应用部署，以及执行一些系统运维自动化的任务。 It provides a basic suite of operations for executing local or remote shell commands (normally or via sudo) and uploading/downloading files, as well as auxiliary functionality such as prompting the running user for input, or aborting execution. 安装安装fabric：激活python2 虚拟环境，pip install fabric 使用SSH keyfabric 提供密码和密钥方式登录远程服务器，为了方便和安全起见，密钥是更好的选择。 生成SSH key首先我们需要在远程服务器生成密钥，在远程执行：$ ssh-keygen在.ssh/ 目录下生成默认rsa算法加密的密钥对（id_rsa 私钥，id_rsa.pub 公钥） 发布公钥密钥生成之后，需要把公钥的内容添加到.ssh 目录下的 _authorizedkeys 文件，1234567$ cd ~/.ssh$ cat id_rsa.pub &gt;&gt; authorized_keys``` 修改权限```bash$ chmod 600 authorized_keys$ chmod 700 ~/.ssh 配置fabric 环境参数将私钥下载到本地，指定fabric 环境配置env.key_filename = &quot;path/to/id_rsa&quot; 示例fabric 提供的API 中，常用的有local() 和run()，分别在本地和远程服务器执行命令。fabric 文件的一个函数对应一个操作。 举一个简单的例子，如需要列出远程服务器”/“下的文件和目录，在本地新建fabfile.py 文件如下： 12345678910#!/usr/bin/python env# -*- coding: utf-8 -*-from fabric.api import *env.hosts=[&apos;username@xxx.xxx.xxx.xxx&apos;]env.key_filename = &quot;id_rsa&quot; # 通过密钥登录远程服务器def hello(): with cd(&apos;/&apos;): # 进入目录 run(&apos;ls -l&apos;) # run() 执行远程操作 列出远程机器上的文件和目录 执行 fab hello 命令列出文件和目录，和在远程服务器上执行一样。 fabfiles 通常放在项目的根目录。 fabric 文档]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go into PyCharm]]></title>
    <url>%2F2018%2F01%2F17%2Fgo-into-pycharm%2F</url>
    <content type="text"><![CDATA[开发Python项目首选PyCharm，PyCharm有很多好用的强大的特性，略作记录以备后用。 Automatic Upload除了集成Git 等版本控制工具，pycharm 还提供自动上传文件到远程主机，以及调用远程主机解释器的功能。配置好SSH连接到远程主机之后，在本地工作区所做的修改可以被自动同步到远程主机上，主要步骤如下： 因为安全原因，我在远程主机禁止用户名密码方式，只允许私钥登录，因此需要提前准备Private key 文件以在IDE 中连接远程主机； PS: 在远程主机生成的ppk私钥文件不被pycharm 支持，需要通过pyttygen 工具进行转换：打开puttygen.exe， Conversation -&gt; Import 导入已生成的ppk 私钥文件，密码可选，然后 Conversation -&gt; Export OpenSSH Key 导出备用。 PyCharm菜单栏进入Tools -&gt; Deployment -&gt; Configuration，新增配置，类型选择SFTP，配置远程主机及端口，选择验证方式为Key Pair，私钥文件选择上一步骤导出的文件，测试SFTP 连接是否成功。 在Mapping 标签页填上本地路径和远程主机发布路径。 远程主机配置完成之后可以继续在Deployment 下的Options 选项中做一些个性化的配置，比如排除哪些文件，是否自动上传等。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Django 笔记]]></title>
    <url>%2F2018%2F01%2F12%2Fdjango-notes%2F</url>
    <content type="text"><![CDATA[Django是一个用python写的轻量级Web框架，虽说是轻量级，但是它能做的事情并不少，有了Django我们就可以用很少的代码来搭建一个现代化的网站，避免重复造轮子。Django2.0之后已经放弃了对python2 的支持，只支持python3.4 及以上版本。 URL Route路由规则Django项目的路由规则写在一系列urls.py文件里，包括项目的urls.py和各个app的urls.py。当一个请求到来，在展示最终页面之前需要经过以下步骤： 首先确定根URLconf，通常这个值在settings.py 中设置。但是如果传入的HttpRequest对象有urlconf属性，那么它将会作为当前请求的根URLconf，代替settings中的ROOT_URLCONF； Django加载该URLconf 模块，找到urlpatterns变量； Django依次匹配每一个url pattern，在第一个匹配所请求URL的pattern处停下来，因此pattern 的顺序是有影响的； 一旦一个URL pattern匹配成功，Django 会调用对应的视图，视图接收以下参数： 一个HTTPRequest 实例; 如果匹配的URL pattern没有返回命名组，正则表达式匹配的内容将会作为positional parameters 提供给视图; 关键字参数由正则表达式匹配的命名组组成，可以被可选参数覆盖； 如果没有匹配到任何URL pattern，或者在匹配过程中抛出了异常，Django会调用一个对应的错误处理视图，比如400，500等； 传递额外的参数给视图URLconf提供了一个hook，允许以python dictionary的形式传递额外的参数给视图函数。123urlpatterns = [ path('blog/&lt;int:year&gt;/', views.year_archive, &#123;'foo': 'bar'&#125;),] 上例中，如果请求/blog/2018/，Django会调用 views.year_archive(request, year=2018, foo=&#39;bar&#39;) 静态文件在生产环境我们通常会使用单独的server来提供对静态文件的访问，Django提供了一个static()方法在调试的时候serve静态文件。123urlpatterns = [ # ... the rest of your URLconf goes here ...] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) ModelDjango已经包含了ORM，因此只需要关注Model类，而不用关心SQL。前提是要在INSTALLED_APPS 中包含指定的app。 Tips：如果使用PyCharm 的话，通过Ctrl + Alt + R 调出python manage.py 命令界面，可以直接执行migrate，shell 等命令，不用在python 命令行执行. MiddlewareDjango 里的Middleware 可以看成是一个hook，处于request/response 过程之间，是一个轻量级的、底层的插件系统，用于改变Django 的输入输出。 一个middleware factory 是一个callable，它接收一个get_response callable作为参数，返回一个middleware；一个middleware 是一个callable，它像view一样，接收一个request， 返回一个response。返回真正的view 之前可能经历数个中间件：在响应阶段，调用视图之前，Django按顺序从上到下应用MIDDLEWARE中定义的中间件。可以把这个结构看成一个洋葱，洋葱的中心是最后展示的view，它被一层层的中间件包裹起来，每一层都调用get_response把request 传递到下一层，直到view，然后response也会按原路返回直到最外层的中间件。 在request 和response 之间想要做的事情，都可以用middleware 来实现。]]></content>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在2018的开始]]></title>
    <url>%2F2018%2F01%2F08%2Fnew-year-2018%2F</url>
    <content type="text"><![CDATA[没想到啊没想到，2018年刚刚开始，就被一场重感冒当头一棒，整整一个星期才慢慢缓过来。 回顾2017年，也不知道做了些什么事。读完一遍Stavrianos 的《全球通史》，重读了一次余华的《活着》，读了东野圭吾的畅销书《解忧杂货店》，还有一些看了就像没看一样的。读了一些Django 的源码，入门了Node，假装给开源世界做了一点贡献，花了两天时间给kohaku.cc 搬家。2017年哪里都没有去…… 惊慌地想要在日记中再找一些风和阳光的蛛丝马迹，聊以慰藉，失望地发现2017年5月某日的上一篇是16年的5月，突然间悲从中来。 2017年，我没有在世界上留下痕迹，岁月却在我身上留下痕迹，长丑了，都说相由心生。 那么2018年，我有一个愿望，就是变帅！]]></content>
      <tags>
        <tag>不知所云</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[任务计划与windows服务的集群化]]></title>
    <url>%2F2017%2F12%2F26%2Fclustered-tasks-and-services%2F</url>
    <content type="text"><![CDATA[我们常常会使用任务计划定时执行一些日常任务，若需要程序长时间执行又不需要用户登录，可能还会用到Windows Service，一般情况单台服务器就能满足要求，但对一些要求比较高的任务可能需要集群化来保证高可用性。在故障转移集群上实现任务计划的集群化和Windows Service的集群化有一些差异。 任务计划集群化Windows Server 2012 之前，我们可以在集群的节点上部署任务，但是任务计划程序对整个集群是不感知的，手动管理各个节点上的任务计划比较容易出错，尤其是在节点多的情况下，Windows Server 2012 以后，通过Cluster Scheduled Tasks 可以十分简单地通过PowerShell 来管理集群上的任务计划，只需要在任意一个节点上注册任务。比较常用的是AnyNode 模式，任务计划在任意一个节点上启用，在其他节点都处于禁用状态。 对于已存在的任务计划，可以先导出xml，以该文件名作为参数进行任务注册，这样就不用单独配置触发器了：1Register-ClusteredScheduledTask -TaskName MyTask -Cluster MyCluster -Xml $xmlFile 注意： 使用-Xml参数的时候需要保证任务计划用户在各个节点上都存在 详见 How to Configure Clustered Tasks with Windows Server 2012 Windows service集群化Windows Service 不能感知到整个集群，因此Windows Service集群化需要首先在各个节点上安装服务，然后再在故障转移集群管理器中添加服务。 参考 Creating a Windows Cluster: Part 5 – Adding Applications and Services to the Cluster]]></content>
      <tags>
        <tag>scheduled task</tag>
        <tag>Windows service</tag>
        <tag>clustered</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬家啦~]]></title>
    <url>%2F2017%2F12%2F23%2Fmove-to-hexo%2F</url>
    <content type="text"><![CDATA[君子生非异也，善假于物也 之前对 python 兴趣正浓的时候用 django 写过一个博客，一边写一边读源码，颇有收获，奈何缺少艺术天分，不懂设计，没有风格，难看得很，一开始写点东西的欲望逐渐消磨，小站也渐渐疏于维护。 偶然发现朋友用hexo 搭的博客，简洁明了，于是萌生了重新梳理博客的想法，纠结于用hexo 搭一个和重写原来的博客之间，最后还是选择 hexo，发现竟意外地好用，于是就有了现在的模样。原来的 kohaku.cc 暂时运行在另一个次元，将来可能以新的面目出现。 最近的日记本写到最后一页，又懒得去买新本子，就这么空了几个月。今后将在此不定期更新，记录一些或好或坏心情，以及其他……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 弱引用]]></title>
    <url>%2F2017%2F05%2F23%2Fpython-weakref%2F</url>
    <content type="text"><![CDATA[Python 的 weakref 模块实现对对象的弱引用（Weak References）。我们知道，Python 的垃圾回收机制基于引用计数器实现，实例创建后将由引用计数器管理，对实例的每一次引用都会使其引用计数器加1，引用的删除使引用计数器减1，如果引用计数器到达0实例将被销毁。但是有时候我们希望在内存需要的时候更早地销毁一个对象，比如发生循环引用时，或者在建立一个对象缓存时；弱引用不能保证对象不被销毁，当一个对象只存在弱引用时，它也会被销毁。 弱引用的一个基本用法就是实现缓存和大对象映射，使一个大对象不会因为存在于缓存或者一个键值对中而逃避被销毁。例如，我们有一些大的二进制图片对象，现在打算把他们和名称一一对应，如果使用 Python 的 dictionary 将名称映射到图片对象（或者反过来），图片对象会一直存在于内存中，因为它们依然作为字典的值（或者键）存在，弱引用可以解决这个问题，使用基于weakref模块实现的 WeakKeyDictionary 和 WeakValueDictionary ,用弱引用来构造映射关系，我们假设图片对象是 WeakValueDictionary 的值，当该对象的引用只是 weak mapping 中的弱引用时，GC会回收该对象，weak mapping 中对应的条目也会被删除；一些内建类型比如 list， dict 不直接支持弱引用，但可以通过子类增加弱引用支持；对对象的弱引用不会增加其引用计数，见下面代码： 123456789101112131415161718192021222324import sysimport weakrefclass A(object): passa = A()print sys.getrefcount(a) # 2b = aprint sys.getrefcount(a) # 3c = weakref.ref(a)print sys.getrefcount(a) # 3print weakref.getweakrefcount(a) # 1del bprint sys.getrefcount(a) # 2del cprint sys.getrefcount(a) # 2print weakref.getweakrefcount(a) # 0 从上面的例子可以看到，对对象的弱引用使用单独的计数器；之所以第一次获取引用计数结果是 2而不是 1，是因为把 a 当参数传入了 getrefcount() 方法。 总结，弱引用主要解决垃圾回收的问题，多用在处理对象缓存和循环引用问题上；回顾一下弱引用在 django 中使用的场景，Signal 类初始化的时候就定义了一个 receiver 缓存，在连接receiver 和信号的时候，默认对 receiver 使用弱引用；weakref 模块的方法和属性详见 weakref 相关文档：https://pymotw.com/2/weakref/index.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Weakref</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[No no no]]></title>
    <url>%2F2014%2F09%2F27%2Fno-no-no%2F</url>
    <content type="text"><![CDATA[Don’t anybody come 惊扰我的幻光 当我需要在这个时间掏出钥匙 这扇门 就是一道梦幻的分隔 窗台上的植物 分明一动不动 又分明在变化 像靠在墙角的脑袋圆圆的娃娃 恍恍惚惚 置身于幻光 在心里生出一道意识 别碰它 一碰就碎 我也像那盆花 一动也不动 我们都小心翼翼啊 假装不得动弹 Don’t anybody come 惊扰我的幻光 只看着它 渐变昏黄]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>不知所云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毕业季的阳光]]></title>
    <url>%2F2012%2F05%2F31%2Fsunshine-in-graduation-season%2F</url>
    <content type="text"><![CDATA[走进西侧门的时候阳光正烈后背已经被书包捂出汗 去食堂的小道上没几个人影才意识到只有我们这样的大四众才能随时享受食堂满是空座的待遇现在距离下课还有一刻钟的时间到处都是空座位巴巴地站在桌旁看别人吃东西的情形不会再出现到我吃完离开的时候来食堂的人才多了起来 我需要找个安静的地方修改论文去图书馆得拿卡信息楼又好像比三教远那么一点 这次靠近三教 有点微妙异样它好像有强大的压力隔绝外界所有在走近三教的过程中我感觉不到有一丝声音出现在我耳中 一个人与我擦身而过这时候的三教 是一头睡着的庞然大物迎面走来的刚从教室出来的学弟学妹边走边讨论着什么我只看到他们嘴唇在动 四年前刚来的时候看三五成群的人谈笑着与我擦身而过我在世界之外四年后要离开的时候看三五成群的人谈笑着与我擦身而过我在世界之外始点与终点之间 似乎没那么遥远 我继续我的行走 没有回头不知道他们会不会回头指着对同伴笑说：你看，那个人是不是很像一只狗……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[狗]]></title>
    <url>%2F2011%2F10%2F05%2Fdog%2F</url>
    <content type="text"><![CDATA[傍晚 马路上遛狗的人不少 狗永远走在前面 也远比人活力 偶尔一人一狗迎面碰到另一人一狗 两狗相互狂吠 不知是示好还是示恶 或者只是打招呼 结果一般都是 稍停一秒 然后错过 姑且对两狗表示一下同情 它们却很安然 绳索困住自由似乎已经被接受 它们继续晃晃悠悠地行进 就像根本没有什么 同类 就在刚刚与自己擦身而过 我看着这只大黑狗 在错过两只小白狗之后快乐的前进 不要想太多 或许它调戏的目的已经达到]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>不知所云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老房子]]></title>
    <url>%2F2010%2F11%2F20%2Fthe-old-house%2F</url>
    <content type="text"><![CDATA[我有一间老房子 住着黄昏的破屋与大河 烟囱和桥梁 飘雪的夜晚里 紫色的长阶梯 半开着门的旧楼房 水泥路边独树一帜的木屋 被斑驳阳光装饰的铁门 闪烁着的叶的影子 如丝细雨 荒凉山路 夏天静谧的小镇 没有声音 也没有风 到了尽头的巷子 名叫胡蝶梦 耀眼的阳光 融化了一圈树叶和白云 日历上摆动的老时钟 嗒嗒嗒 凝望着 窗户下安静看书的小娃娃 枝桠上独舞的红丝带 阴沉的乌云 肃杀的古堡 烫金的晚霞 利剑般的高楼大厦 沧海明月 两处天涯 我有一间老房子 名字 叫《遗忘》 住着黄昏的破屋与大河 烟囱和桥梁]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生命中太多的幻光 不能追逐]]></title>
    <url>%2F2010%2F09%2F27%2Fpursuit-of-light%2F</url>
    <content type="text"><![CDATA[.]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
        <tag>幻光</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[久石让]]></title>
    <url>%2F2010%2F01%2F09%2Fjoe-hisaishi%2F</url>
    <content type="text"><![CDATA[久石让 你的音乐来自哪里 ……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cymm wxsm]]></title>
    <url>%2F2009%2F07%2F24%2Fcymm-wxsm%2F</url>
    <content type="text"><![CDATA[不是睡不着 是电池还没有耗尽 好久沒遇上下雨了 這兩天卻都在下雨 狂暴地下 明明還沒到該天黑的時候 天黑了 只隐约知道外头在下雨 等我再次回過神來 只有清涼的風和一地的積水 天又亮了 其實一直在天上 只是沒有落下來 下雨之前 既悶又熱 下過雨之後 涼爽了許多 踩著被積水包圍的已經干了的地方向外走 涼風突然吹在身上 不由自主地摩擦雙臂 短暫的刺激過後 我放下雙手 開始享受夏天難得的涼風 就算不是太陽 有這風 也能讓人十分舒服的 虧得下雨了 不然 還真忘記了夏天也不都是豔陽高照的 呵呵……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夏天的味道]]></title>
    <url>%2F2009%2F04%2F13%2Fscent-of-summer%2F</url>
    <content type="text"><![CDATA[我到图书馆的时候，刚过正午，那里人还不多，屋里很亮，很安静。 看书看了没多久，我也趴桌子上了…… 迷迷糊糊中，仿佛听到风扇转动的声音。睁眼，没有发现风扇，却让我突然之间闻到了夏天的味道…… “中午，刚吃完饭，大家都趴在桌子上，没有人说话——大家都睡着了。窗外，树上的的树叶在晃动，却听不见它们发出的声响，耳边传来风扇搅动的声音，夹杂着笔尖划过纸面的沙沙声，偶尔传来的一两句低语，并没有显得格格不入，所有的声音都是那么孤独，这时候，天上飘过一朵云，原本明亮的房间突然暗了下来，而后又缓缓变亮……躁动在安详中消亡。” 艳阳，暖风，还有永远都飞不尽的飞絮……]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年少荒唐</tag>
      </tags>
  </entry>
</search>
